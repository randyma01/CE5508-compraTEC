version: '3.3'

services:
  catalog_services:
    container_name: catalog-services
    image: randyma01/catalog_services:v3.1.0
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
    ports:
      - '7000:8080'
    networks:
      - webnet

  orders_services:
    container_name: orders-service
    image: randyma01/orderservices:v3.0.0
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
    ports:
      - '7001:8080'
    networks:
      - webnet

  visualizer:
    container_name: visualizer-1
    image: dockersamples/visualizer:stable
    ports:
      - '80:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

  redis:
    image: redis
    ports:
      - '6379:6379'
    volumes:
      - '/home/docker/data:/data'
    deploy:
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet

  web:
    image: randyma01/counter_service:v1.0.0.
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
    ports:
      - '83:80'
    networks:
      - webnet

networks:
  webnet:
